{"version":3,"sources":["../../src/lib/processTripleArgs.js"],"names":[],"mappings":"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","file":"processTripleArgs.js","sourcesContent":["import inquirer from 'inquirer';\nimport chalk from 'chalk';\nimport { isString, isPlainObject, isArray, isNil, isBoolean, isNumber } from 'lodash';\nimport finaliseOptions from './finaliseOptions';\n\n/**\n * Processes any arguments object that fulfills the triple-argument signature\n * used by `select()` and `checkboxes()`:\n *\n * `([String: label], Array: choices, [PlainObject: options])`\n *\n * (NB. that is the expected signature of the passed-in `args` object,\n * not of this function itself.)\n */\n\nexport default function argsTriple(args, defaultLabel, type) {\n  let label = defaultLabel;\n  let choices;\n  let options;\n\n  // extract args\n  switch (args.length) {\n    case 0: throw new TypeError('input: Expected at least one argument (an array of choices)');\n\n    case 1: {\n      choices = args[0];\n      options = {};\n      break;\n    }\n\n    case 2: {\n      const first = args[0];\n      const second = args[1];\n\n      if (isString(first)) {\n        label = first;\n        choices = second;\n        options = {};\n      }\n      else {\n        choices = first;\n        options = second;\n      }\n\n      break;\n    }\n\n    case 3: {\n      label = args[0];\n      choices = args[1];\n      options = args[2];\n      break;\n    }\n\n    default: throw new TypeError(`input: Expected 0-3 arguments, got ${arguments.length}`);\n  }\n\n  // validate basic types\n  if (!isPlainObject(options)) {\n    throw new TypeError(`input: Expected options to be an object, but got: ${typeof options}`);\n  }\n\n  if (!isArray(choices)) {\n    throw new TypeError(`input: Expected choices to be an array, but got: ${typeof options}`);\n  }\n\n  // validate/normalise choices\n  let firstEnabledChoiceIndex;\n  let defaultAnswerIndex;\n  {\n    let enabledChoicesCount = 0;\n\n    choices = choices.map((choice, i) => {\n      let realChoice;\n\n      if (choice === null) return new inquirer.Separator(' ');\n\n      if (isString(choice)) realChoice = { name: choice, value: choice };\n      else if (isPlainObject(choice)) {\n        // quick return for disabled choice\n        if (choice.disabled === true) {\n          return new inquirer.Separator(\n            choice.name ? chalk.grey(choice.name) : ' '\n          );\n        }\n\n        if (choice.disabled !== undefined && !isBoolean(choice.disabled)) {\n          throw new TypeError(\n            `input: Expected choice ${i}'s 'disabled' property to be boolean if defined, ` +\n            `but got ${typeof choice.disabled}`\n          );\n        }\n\n        if (!isString(choice.name)) {\n          throw new TypeError(\n            `input: Expected choice ${i}'s 'name' property to be a string, ` +\n            `but it is ${typeof choice.name}`\n          );\n        }\n\n        if (type !== 'checkbox' && !isNil(choice.checked)) {\n          throw new Error(\n            `input: Choice #${i} had a 'checked' property, but this only applies to the ` +\n            \"checkboxes() question type. For select(), please use the 'default' option instead.\"\n          );\n        }\n\n        realChoice = choice;\n      }\n      else {\n        throw new TypeError(\n          \"input: Expected each item in 'choices' to be a string or plain object, \" +\n          `but item #${i} was: ${typeof choice}`\n        );\n      }\n\n      // work around inquirer interpreting empty string as falsey\n      if (realChoice.name === '') realChoice.name = ' ';\n\n      // use 'name' as the value if undefined\n      if (realChoice.value === undefined) realChoice.value = realChoice.name;\n\n      // note if this is the first enabled choice we've encountered\n      if (enabledChoicesCount === 0) firstEnabledChoiceIndex = i;\n\n      // note if this choice should be the default answer (if no default was set)\n      if (\n        options.default !== undefined &&\n        defaultAnswerIndex === undefined &&\n        realChoice.value === options.default\n      ) defaultAnswerIndex = enabledChoicesCount;\n\n      // note how many enabled choices there are\n      enabledChoicesCount++;\n\n      return realChoice;\n    });\n\n    // force minimum 2 enabled choices\n    if (enabledChoicesCount < 2) {\n      throw new Error(\n        'input: Expected choices array to have 2 or more items (not including disabled items) ' +\n        `but found ${enabledChoicesCount}`\n      );\n    }\n  }\n\n  // process 'default' option (we want this to be the actual value, but inquirer\n  // wants it to be supplied as an array index, not counting separators)\n  let inquirerDefault;\n  if (options.default === undefined) inquirerDefault = firstEnabledChoiceIndex;\n  else if (type === 'checkbox') {\n    throw new TypeError(\n      \"input: The 'default' option doesn't work for checkboxes() - use { checked: true } instead.\"\n    );\n  }\n  else if (isNumber(defaultAnswerIndex)) inquirerDefault = defaultAnswerIndex;\n  else {\n    throw new Error(\n      \"input: You set a 'default' answer, but none of the enabled choices had\" +\n      'this answer as its value'\n    );\n  }\n\n  return finaliseOptions({\n    choices, label, type, inquirerDefault,\n    validate: options.validate,\n  });\n}\n"]}