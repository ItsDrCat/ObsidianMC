{"version":3,"sources":["../../src/lib/Prompt.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEqB;AACnB,WADmB,MACnB,OAAiE;QAAnD,mBAAmD;QAA5C,iBAA4C;QAAtC,uCAAsC;QAArB,uBAAqB;QAAZ,yBAAY;wCAD9C,QAC8C;;AAC/D,SAAK,KAAL,GAAa,KAAb,CAD+D;AAE/D,SAAK,IAAL,GAAY,IAAZ,CAF+D;AAG/D,SAAK,eAAL,GAAuB,eAAvB,CAH+D;AAI/D,SAAK,OAAL,GAAe,OAAf,CAJ+D;AAK/D,SAAK,QAAL,GAAgB,QAAhB,CAL+D;GAAjE;;6BADmB;;;;YAUT,OAAO,MAAM,iBAAiB,SAAS,UAEzC,iBAOF,mBACA;;;;;AAVI,wBAAoD,KAApD;AAAO,uBAA6C,KAA7C;AAAM,kCAAuC,KAAvC;AAAiB,0BAAsB,KAAtB;AAAS,2BAAa,KAAb;AAEzC,kCAAkB;AACtB,kCADsB,EACb,UADa;AAEtB,wBAAM,QAAN;AACA,2BAAS,KAAT;AACA,2BAAS,eAAT;;AAGE,oCAAoB;AACpB;;;AAEJ,oBAAI,QAAJ,EAAc;AACZ,kCAAgB,QAAhB,GAA2B,UAAU,MAAV,EAAkB;AAC3C,wBAAM,OAAO,KAAK,KAAL,EAAP,CADqC;;AAG3C,sCAAQ,OAAR,CAAgB,SAAS,MAAT,CAAhB;;qBAEG,KAFH,CAES,iBAAS;AACd,0CAAoB,IAApB,CADc;AAEd,kDAA4B,KAA5B,CAFc;AAGd,6BAAO,IAAP,CAHc;qBAAT,CAFT,CAOG,IAPH,CAOQ,kBAAU;AACd,2BAAK,WAAW,KAAX,GAAmB,gBAAnB,GAAsC,MAAtC,CAAL,CADc;qBAAV,CAPR,CAH2C;mBAAlB,CADf;iBAAd;;iDAiBO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,qCAAS,MAAT,CAAgB,CAAC,eAAD,CAAhB,EAAmC,iBAAgB;wBAAb,sBAAa;;AACjD,wBAAI,iBAAJ,EAAuB;AACrB,6BAAO,yBAAP,EADqB;AAErB,6BAFqB;qBAAvB;;AAKA,4BAAQ,MAAR,EANiD;mBAAhB,CAAnC,CADsC;iBAArB;;;;;;;;;;;;;;;;;SAvCF","file":"Prompt.js","sourcesContent":["import inquirer from 'inquirer';\n\nexport default class Prompt {\n  constructor({ label, type, inquirerDefault, choices, validate }) {\n    this.label = label;\n    this.type = type;\n    this.inquirerDefault = inquirerDefault;\n    this.choices = choices;\n    this.validate = validate;\n  }\n\n  async execute() {\n    const { label, type, inquirerDefault, choices, validate } = this;\n\n    const inquirerOptions = {\n      choices, type,\n      name: 'answer',\n      message: label,\n      default: inquirerDefault,\n    };\n\n    let validationErrored = false;\n    let validationRejectionReason;\n\n    if (validate) {\n      inquirerOptions.validate = function (answer) {\n        const done = this.async();\n\n        Promise.resolve(validate(answer))\n          // manually 'remember' rejection and swallow it\n          .catch(error => {\n            validationErrored = true;\n            validationRejectionReason = error;\n            return true;\n          })\n          .then(result => {\n            done(result === false ? 'Invalid answer' : result);\n          });\n      };\n    }\n\n    return new Promise((resolve, reject) => {\n      inquirer.prompt([inquirerOptions], ({ answer }) => {\n        if (validationErrored) {\n          reject(validationRejectionReason);\n          return;\n        }\n\n        resolve(answer);\n      });\n    });\n  }\n}\n"]}